// src/app/pages/contact/contact.component.ts
import { Component, OnInit, ViewChild, ElementRef, AfterViewInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import {
  FormBuilder,
  FormGroup,
  ReactiveFormsModule,
  Validators,
} from '@angular/forms';
import { RouterModule } from '@angular/router';
import { trigger, transition, style, animate, query, stagger, state } from '@angular/animations';

@Component({
  selector: 'app-contact',
  templateUrl: './contact.component.html',
  styleUrls: ['./contact.component.css'],
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule, RouterModule],
  animations: [
    trigger('fadeIn', [
      transition(':enter', [
        style({ opacity: 0, transform: 'translateY(20px)' }),
        animate('0.5s ease-out', style({ opacity: 1, transform: 'translateY(0)' }))
      ])
    ]),
    trigger('formAnimation', [
      transition(':enter', [
        query('.form-group', [
          style({ opacity: 0, transform: 'translateY(20px)' }),
          stagger(100, [
            animate('0.5s ease-out', style({ opacity: 1, transform: 'translateY(0)' }))
          ])
        ], { optional: true })
      ])
    ]),
    trigger('buttonAnimation', [
      transition(':enter', [
        style({ opacity: 0, transform: 'scale(0.8)' }),
        animate('0.5s 0.3s ease-out', style({ opacity: 1, transform: 'scale(1)' }))
      ])
    ])
  ],


export class ContactComponent implements OnInit, AfterViewInit {
  @ViewChild('mapContainer') mapContainer!: ElementRef;
  
  contactForm!: FormGroup;
  formSubmitted = false;
  formSuccess = false;
  isLoading = false;
  activeTab: string = 'form';
  showFaq: boolean = false;
  selectedFaq: number | null = null;
  
  // Novo sistema de feedback
  feedbackMessage: string = '';
  feedbackType: 'success' | 'error' | 'info' | '' = '';
  showFeedback: boolean = false;
  
  // Informações de contato
  contactInfo = {
    email: 'joaopedro@example.com',
    phone: '+351 912 345 678',
    whatsapp: '+351912345678',
    location: 'Lisboa, Portugal',
    responseTime: '24 horas',
    coordinates: { lat: 38.7223, lng: -9.1393 }, // Coordenadas de Lisboa
    socialMedia: [
      {
        name: 'LinkedIn',
        icon: 'fab fa-linkedin',
        url: 'https://linkedin.com/',
      },
      { name: 'GitHub', icon: 'fab fa-github', url: 'https://github.com/' },
      { name: 'Twitter', icon: 'fab fa-twitter', url: 'https://twitter.com/' },
      {
        name: 'Instagram',
        icon: 'fab fa-instagram',
        url: 'https://instagram.com/',
      },
    ],
  }
  
  // FAQ para perguntas comuns
  faqs = [
    {
      question: 'Qual é o seu processo de desenvolvimento?',
      answer: 'Meu processo de desenvolvimento segue metodologias ágeis, com foco em entregas incrementais e feedback contínuo. Cada projeto começa com uma fase de planejamento detalhada, seguida por sprints de desenvolvimento e revisões regulares.'
    },
    {
      question: 'Quais são seus valores de orçamento?',
      answer: 'Os orçamentos variam conforme a complexidade e escopo do projeto. Trabalho com transparência total nos custos e ofereço diferentes opções para atender a diferentes necessidades e orçamentos.'
    },
    {
      question: 'Quanto tempo leva para concluir um projeto?',
      answer: 'O tempo de desenvolvimento depende da complexidade do projeto. Websites simples podem levar 2-4 semanas, enquanto aplicações mais complexas podem levar 2-6 meses. Sempre forneço um cronograma detalhado no início do projeto.'
    },
    {
      question: 'Você oferece suporte após o lançamento?',
      answer: 'Sim, ofereço pacotes de suporte e manutenção pós-lançamento. Isso inclui correções de bugs, atualizações de segurança, e melhorias incrementais para garantir que seu projeto continue funcionando perfeitamente.'
    }
  ]

  constructor(private fb: FormBuilder) {}

  ngOnInit(): void {
    this.initForm();
    this.loadGoogleMapsScript();
  }

  ngAfterViewInit(): void {
    // O mapa será inicializado quando o script do Google Maps for carregado
  }

  initForm(): void {
    this.contactForm = this.fb.group({
      name: ['', [Validators.required, Validators.minLength(3)]],
      email: ['', [Validators.required, Validators.email]],
      subject: ['', Validators.required],
      phone: ['', [Validators.pattern('^[\+]?[(]?[0-9]{3}[)]?[-\s\.]?[0-9]{3}[-\s\.]?[0-9]{4,6}$')]],
      projectType: ['website'],
      urgency: ['normal'],
      message: ['', [Validators.required, Validators.minLength(10)]],
      honeypot: [''] // Campo oculto para prevenir spam
    });
    
    // Monitorar mudanças no formulário para feedback em tempo real
    this.contactForm.valueChanges.subscribe(() => {
      if (this.formSubmitted) {
        this.validateAllFormFields();
      }
    });
  }

  onSubmit(): void {
    this.formSubmitted = true;
    this.validateAllFormFields();

    // Verificação de honeypot para prevenção de spam
    if (this.contactForm.get('honeypot')?.value) {
      console.log('Potencial spam detectado');
      this.showFeedbackMessage('Erro no envio. Tente novamente mais tarde.', 'error');
      return;
    }

    if (this.contactForm.valid) {
      console.log('Formulário enviado:', this.contactForm.value);
      this.isLoading = true;

      // Simulação de envio (substitua por seu serviço real de envio)
      setTimeout(() => {
        this.isLoading = false;
        this.formSuccess = true;
        this.showFeedbackMessage('Mensagem enviada com sucesso! Responderei em breve.', 'success');
        this.contactForm.reset();
        this.formSubmitted = false;

        // Reset da mensagem de sucesso após 8 segundos
        setTimeout(() => {
          this.formSuccess = false;
        }, 8000);
      }, 1500);
    } else {
      this.showFeedbackMessage('Por favor, corrija os erros no formulário.', 'error');
    }
  }

  // Validar todos os campos do formulário
  validateAllFormFields(): void {
    Object.keys(this.contactForm.controls).forEach(field => {
      const control = this.contactForm.get(field);
      if (control) {
        control.markAsTouched({ onlySelf: true });
      }
    });
  }

  // Sistema de feedback melhorado
  showFeedbackMessage(message: string, type: 'success' | 'error' | 'info'): void {
    this.feedbackMessage = message;
    this.feedbackType = type;
    this.showFeedback = true;
    
    // Auto-fechar após 5 segundos
    setTimeout(() => {
      this.showFeedback = false;
    }, 5000);
  }

  // Método para contato via WhatsApp
  contactViaWhatsApp(): void {
    const message = encodeURIComponent('Olá, gostaria de entrar em contato!');
    window.open(
      `https://wa.me/${this.contactInfo.whatsapp}?text=${message}`,
      '_blank'
    );
  }

  // Método para enviar email
  contactViaEmail(): void {
    window.location.href = `mailto:${this.contactInfo.email}?subject=Contato via Portfólio`;
  }

  // Getters para validação de formulário
  get nameControl() {
    return this.contactForm.get('name');
  }
  get emailControl() {
    return this.contactForm.get('email');
  }
  get subjectControl() {
    return this.contactForm.get('subject');
  }
  get phoneControl() {
    return this.contactForm.get('phone');
  }
  get projectTypeControl() {
    return this.contactForm.get('projectType');
  }
  get urgencyControl() {
    return this.contactForm.get('urgency');
  }
  get messageControl() {
    return this.contactForm.get('message');
  }


  // Smooth scroll to element
  scrollToElement(elementId: string): void {
    const element = document.getElementById(elementId);
    if (element) {
      element.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }
  }

  // Alternar entre abas
  setActiveTab(tab: string): void {
    this.activeTab = tab;
  }
  
  // Alternar FAQ
  toggleFaq(index: number): void {
    this.selectedFaq = this.selectedFaq === index ? null : index;
  }
  
  // Inicializar o mapa do Google
  loadGoogleMapsScript(): void {
    // Verificar se o script já foi carregado
    if (window.google && window.google.maps) {
      this.initMap();
      return;
    }
    
    // Adicionar o script do Google Maps (na prática, você deve usar sua chave API)
    const script = document.createElement('script');
    script.src = `https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY`;
    script.async = true;
    script.defer = true;
    script.onload = () => this.initMap();
    document.head.appendChild(script);
  }
  
  // Inicializar o mapa quando o script estiver carregado
  initMap(): void {
    if (this.mapContainer && window.google && window.google.maps) {
      const { lat, lng } = this.contactInfo.coordinates;
      const mapOptions = {
        center: { lat, lng },
        zoom: 13,
        styles: [
          {
            "featureType": "all",
            "elementType": "geometry",
            "stylers": [
              { "color": "#f5f5f5" }
            ]
          },
          {
            "featureType": "water",
            "elementType": "geometry",
            "stylers": [
              { "color": "#c9c9c9" }
            ]
          },
          {
            "featureType": "water",
            "elementType": "labels.text.fill",
            "stylers": [
              { "color": "#9e9e9e" }
            ]
          }
        ],
        disableDefaultUI: true,
        zoomControl: true
      };
      
      const map = new google.maps.Map(this.mapContainer.nativeElement, mapOptions);
      
      // Adicionar marcador
      new google.maps.Marker({
        position: { lat, lng },
        map,
        title: 'Minha Localização'
      });
    }
  }
}