// src/app/pages/contact/contact.component.ts
import { Component, OnInit, ViewChild, ElementRef, AfterViewInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import {
  FormBuilder,
  FormGroup,
  ReactiveFormsModule,
  Validators,
} from '@angular/forms';
import { RouterModule } from '@angular/router';
import { trigger, transition, style, animate, query, stagger, state } from '@angular/animations';

@Component({
  selector: 'app-contact',
  templateUrl: './contact.component.html',
  styleUrls: ['./contact.component.css'],
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule, RouterModule],
  animations: [
    trigger('fadeIn', [
      transition(':enter', [
        style({ opacity: 0, transform: 'translateY(20px)' }),
        animate('0.5s ease-out', style({ opacity: 1, transform: 'translateY(0)' }))
      ])
    ]),
    trigger('slideAnimation', [
      transition(':enter', [
        style({ opacity: 0, transform: 'translateX(-20px)' }),
        animate('0.4s ease-out', style({ opacity: 1, transform: 'translateX(0)' }))
      ]),
      transition(':leave', [
        animate('0.3s ease-in', style({ opacity: 0, transform: 'translateX(20px)' }))
      ])
    ]),
    trigger('formAnimation', [
      transition(':enter', [
        query('.form-group', [
          style({ opacity: 0, transform: 'translateY(20px)' }),
          stagger(100, [
            animate('0.5s ease-out', style({ opacity: 1, transform: 'translateY(0)' }))
          ])
        ], { optional: true })
      ])
    ]),
    trigger('buttonAnimation', [
      transition(':enter', [
        style({ opacity: 0, transform: 'scale(0.8)' }),
        animate('0.5s 0.3s ease-out', style({ opacity: 1, transform: 'scale(1)' }))
      ])
    ]),
    trigger('pulseAnimation', [
      transition(':enter', [
        style({ opacity: 0, transform: 'scale(0.9)' }),
        animate('0.3s ease-out', style({ opacity: 1, transform: 'scale(1)' }))
      ])
    ]),
    trigger('expandCollapse', [
      state('collapsed', style({ height: '0', opacity: 0, overflow: 'hidden' })),
      state('expanded', style({ height: '*', opacity: 1 })),
      transition('collapsed <=> expanded', animate('300ms ease-in-out'))
    ]),
    trigger('feedbackAnimation', [
      state('success', style({ backgroundColor: 'rgba(76, 175, 80, 0.1)', borderColor: '#4caf50' })),
      state('error', style({ backgroundColor: 'rgba(244, 67, 54, 0.1)', borderColor: '#f44336' })),
      state('info', style({ backgroundColor: 'rgba(33, 150, 243, 0.1)', borderColor: '#2196f3' })),
      transition(':enter', [
        style({ opacity: 0, transform: 'translateY(-20px)' }),
        animate('0.3s ease-out', style({ opacity: 1, transform: 'translateY(0)' }))
      ]),
      transition(':leave', [
        animate('0.2s ease-in', style({ opacity: 0, transform: 'translateY(-20px)' }))
      ])
    ])
  ]
})
export class ContactComponent implements OnInit, AfterViewInit {
  @ViewChild('mapContainer') mapContainer!: ElementRef;

  contactForm!: FormGroup;
  formSubmitted = false;
  formSuccess = false;
  isLoading = false;
  activeTab: string = 'form';
  showFaq: boolean = false;
  selectedFaq: number | null = null;

  feedbackMessage: string = '';
  feedbackType: 'success' | 'error' | 'info' | '' = '';
  showFeedback: boolean = false;



  constructor(private fb: FormBuilder) {}

  ngOnInit(): void {
    this.initForm();
  }

   // Aba inicial

  setActiveTab(tab: string) {
    this.activeTab = tab;
  }

  ngAfterViewInit(): void {}

  initForm(): void {
    this.contactForm = this.fb.group({
      name: ['', [Validators.required, Validators.minLength(3)]],
      email: ['', [Validators.required, Validators.email]],
      subject: ['', Validators.required],
      phone: ['', [Validators.pattern('^[\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4,6}$')]],
      projectType: ['website'],
      urgency: ['normal'],
      message: ['', [Validators.required, Validators.minLength(10)]],
      honeypot: ['']
    });
  }

  onSubmit(): void {
    this.formSubmitted = true;
    if (this.contactForm.valid) {
      this.isLoading = true;
      setTimeout(() => {
        this.isLoading = false;
        this.formSuccess = true;
        this.contactForm.reset();
        this.formSubmitted = false;
      }, 1500);
    }
  }
}
